buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "0.7.1"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker-compose'

dependencies {

    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile 'com.sendgrid:sendgrid-java:4.0.1'
    compile 'org.rythmengine:rythm-engine:1.2.0'

    compile 'org.jsoup:jsoup:1.10.3'

    compile 'org.apache.poi:poi:3.17'

    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

    // compile("org.springframework.boot:spring-boot-devtools")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
}

group = 'se.acrend.ppm'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions.apiVersion = "1.2"
    kotlinOptions.languageVersion = "1.2"
    kotlinOptions.jvmTarget = "1.8"

}

bootRun {
    doFirst() {
        //Retrieve service info from dockerCompose

        def db = dockerCompose.servicesInfos.mongo
        
        systemProperty 'MONGODB_URI', "mongodb://ppm:ppm@${db.host}:${db.ports[27017]}/local"
        systemProperty 'MONGODB_NAME', "local"

    }
}

/**
 * Configures compose task for further information
 * see {@linktourl https://github.com/avast/docker-compose-gradle-plugin#usage}
 */
dockerCompose {
    useComposeFiles = ["${project.rootProject.projectDir}/docker/docker-compose.yml"]
    // captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
    stopContainers = false // doesn't call `docker-compose down` - useful for debugging
    removeContainers = false
    projectName = project.name.replace("-", "_")
    environment.put('MSSQL_SA_PASSWORD', 'd62]te2V')
}.isRequiredBy(bootRun) // hooks 'dependsOn composeUp' and 'finalizedBy composeDown'