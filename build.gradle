buildscript {
    ext {
        kotlinVersion = '1.1.50'
        springBootVersion = '2.0.0.M4'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencies {

    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')

    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile 'com.sendgrid:sendgrid-java:4.0.1'
    compile 'org.rythmengine:rythm-engine:1.2.0'

    compile 'org.jsoup:jsoup:1.10.3'

    compile 'org.apache.poi:poi:3.17'

    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

    compile("org.springframework.boot:spring-boot-devtools")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
}

group = 'se.acrend.ppm'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task copyJar(type: Copy, dependsOn: bootJar) {
    from "$buildDir/libs"
    include "*.jar"
    into "$buildDir/docker"
    rename { filename -> "app.jar"}
}

task buildImage(type: Exec, dependsOn: copyJar, group: "docker") {

    inputs.files "$buildDir/docker/app.jar", "Dockerfile"

    workingDir "$projectDir"

    commandLine "docker", "build",  "-t", "johkin/ppmselector", "."
}

task login(type: Exec, dependsOn: buildImage, group: "docker") {

    println System.env.DOCKER_USERNAME

    workingDir "$projectDir"

//    commandLine "docker", "login", "-u=${System.env.DOCKER_USERNAME}", "-p=${System.env.DOCKER_PASSWORD}"
}
task publishImage(type: Exec, dependsOn: [buildImage,login], group: "docker") {

    workingDir "$projectDir"

    commandLine "docker", "push", "johkin/ppmselector"
}